// 安装
npm install -g create-react-app
create-react-app my-app
cd my-app
// 运行
npm start
// 弹出webpack配置（自定义配置）
npm run eject
// 如何将本地有的项目传到git上(学习网址https://www.cnblogs.com/eedc/p/6168430.html)
到指定目录
git init
git add .


// es6 语法
let const声明变量，以及块级作用域
结构赋值
箭头函数，赋默认值
import { } from ""
import course from ""  (export default)
import * as content from ""

数组的一些方法
forEach遍历数组,map映射新数组
every 判断数组是否通过测试
some 是否有元素通过测试
filter 过滤数组
查找符合条件的元素
[1,2,3].indexOf(2) 查找索引
链接数组
arr1=[1,2,3];
arr2=[4,5,6];
[...arr1,...arr2]
数组去重
arr=[1,2,3,4,5,6,3,2,1];
[...new Set(arr)]
// 对象的方法
Object.keys({name:"jm",age:14});
对象的数组的值
Object.values({name:"jm",age:14})
反转数组
reverse():
获取数组的头和尾巴（略，用解构赋值）


//Express+mongodb(http://localhost:9093/data)
安装
npm install express --save
启动
cd server
node server.js

每次修改都重启node,很麻烦
npm install -g nodemon
nodemon server.js

// Express 使用
app.get app.post 分别开发get 和 post接口
app.user 使用模块
代 res.send, res.json, res.sendfile响应不同的内容

基础:
mongodb
安装 mongodb(参考地址：https://blog.csdn.net/heshushun/article/details/77776706)
npm install mongoose --save
修改server.js链接数据库
后续进阶
mongodb独立工具函数
post 参数
cookie

React 基础
略
结合antd mobild
npm install antd-mobile --save
按需加载
npm install babel-plugin-import --save-dev
修改
 "babel": {
    "presets": [
      "react-app"
    ],
    "plugins": [
      ["import", { "libraryName": "antd-mobile", "style": "css" }]
    ]
  },
  // 组件（略）

//Redux
专注于状态管理的库
安装 npm install redux --save

进一步
1、store.dispatch 方法传递给组件，内部可以调用修改状态
2、Subscribe订阅render函数，每次修改都重新渲染
3、Redux相关内容，移到单独的文件index.redux.js单独管理

更进一步 处理异步任务
redux-thunk插件安装
npm install redux-thunk --save
启用插件
import {createStore,applyMiddleware} from "redux"
import thunk  from "redux-thunk"
const  store=createStore(counter,applyMiddleware(thunk));

redux chorm 插件安装
redux 调试工具的安装
import {createStore,applyMiddleware,compose} from "redux"
const reduxDevtools=window.devToolsExtension;
const  store=createStore(
counter,
compose(applyMiddleware(thunk),reduxDevtools()||{}));

// 使用react-redux
安装 npm install react-redux --save
忘记 subscribe记住reducer,action和dispatch即可
react-redux 提供Proveder和connect两个接口来链接

Provider 组件在应用最外层，传入store即可，只用一次
Connect 负责从外部获取组件需要的参数

Connect 可以用装饰器的方式来写:需要安装下面的东西
npm install babel-plugin-transform-decorators-legacy --save

// 后续进阶
什么数据应该放在React里
Redux管理ajax
Redux管理聊天数据


// react-router的使用
redux-router4 兼容浏览器和react-native
React 开发单页面应用必备，践行路由即组件的概念
核心概念：动态路由、Route、Link、Switch

安装
npm install react-router-dom --save
初始Router4
入门组件
BrowserRouter,包裹整个应用
Router 路由对应渲染的组件，可嵌套
Link跳转专用

// 其他组件
url参数，Route组件参数可用冒号标识参数
其他略（如 redirect)

复杂redux应用，多个reducer用combineReducers合并
Redirect组件跳转
Switch 只渲染一个Route组件











